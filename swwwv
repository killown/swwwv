#!/usr/bin/env python3
import gi
import subprocess
import os
import sys
import shutil

gi.require_version("Gtk", "4.0")
from gi.repository import Gtk, Gio, GdkPixbuf, Gdk


class ImageViewer(Gtk.ApplicationWindow):
    def __init__(self, app, image_files):
        super().__init__(application=app)
        self.set_default_size(800, 600)
        self.image_files = image_files
        self.current_index = 0

        self.vbox = Gtk.Box(orientation=Gtk.Orientation.VERTICAL, spacing=6)
        self.set_child(self.vbox)

        header = Gtk.HeaderBar()
        self.set_title("GTK4 Image Viewer")
        self.set_titlebar(header)

        menu_button = Gtk.MenuButton()
        header.pack_end(menu_button)

        menu_model = Gio.Menu()
        menu_model.append("Set as Wallpaper", "app.set_wallpaper")
        menu_model.append("Next Image", "app.next_image")
        menu_model.append("Previous Image", "app.prev_image")
        menu_button.set_menu_model(menu_model)

        self.image = Gtk.Picture()
        self.vbox.append(self.image)

        self.vbox.connect("notify::allocation", self.on_size_allocate)

        # Setup right-click context menu
        self.setup_context_menu()

        # Add right-click gesture controller to image
        gesture = Gtk.GestureClick.new()
        gesture.set_button(3)  # Right mouse button
        gesture.connect("pressed", self.on_right_click)
        self.image.add_controller(gesture)

        self.load_image(self.current_index)

    def setup_context_menu(self):
        builder = Gtk.Builder.new()
        builder.add_from_string("""
            <interface>
              <menu id='context-menu'>
                <section>
                  <item>
                    <attribute name='label'>Set as Wallpaper</attribute>
                    <attribute name='action'>app.set_wallpaper</attribute>
                  </item>
                </section>
              </menu>
            </interface>
        """)
        menu_model = builder.get_object("context-menu")
        self.popover_menu = Gtk.PopoverMenu.new_from_model(menu_model)
        self.popover_menu.set_parent(self.image)

    def on_right_click(self, gesture, n_press, x, y):
        from gi.repository import GLib

        rect = Gdk.Rectangle()
        rect.x = int(x)
        rect.y = int(y)
        rect.width = 1
        rect.height = 1
        self.popover_menu.set_pointing_to(rect)
        GLib.idle_add(self.popover_menu.popup)

    def on_size_allocate(self, widget, param):
        self.load_image(self.current_index)

    def load_image(self, index):
        if 0 <= index < len(self.image_files):
            path = self.image_files[index]
            try:
                pixbuf = GdkPixbuf.Pixbuf.new_from_file(path)
            except Exception as e:
                print(f"Error loading image {path}: {e}")
                return

            allocation = self.vbox.get_allocation()
            width = allocation.width or 800
            height = allocation.height or 600

            img_width = pixbuf.get_width()
            img_height = pixbuf.get_height()

            scale_w = width / img_width
            scale_h = height / img_height
            scale = min(scale_w, scale_h)

            new_width = max(1, int(img_width * scale))
            new_height = max(1, int(img_height * scale))

            scaled = pixbuf.scale_simple(
                new_width, new_height, GdkPixbuf.InterpType.BILINEAR
            )

            texture = Gdk.Texture.new_for_pixbuf(scaled)
            self.image.set_paintable(texture)

            self.current_index = index
            self.set_title(f"GTK4 Image Viewer - {os.path.basename(path)}")

    def set_wallpaper(self, *args):
        current_file = self.image_files[self.current_index]
        try:
            subprocess.run(["swww", "img", current_file], check=True)
            print(f"Wallpaper set: {current_file}")
        except subprocess.CalledProcessError as e:
            print(f"Failed to set wallpaper: {e}")

    def next_image(self, *args):
        next_idx = (self.current_index + 1) % len(self.image_files)
        self.load_image(next_idx)

    def prev_image(self, *args):
        prev_idx = (self.current_index - 1) % len(self.image_files)
        self.load_image(prev_idx)


class ImageViewerApp(Gtk.Application):
    def __init__(self, image_files):
        super().__init__(
            application_id="org.example.GtkImageViewer",
            flags=Gio.ApplicationFlags.HANDLES_OPEN,
        )
        self.image_files = image_files

        self.create_action("set_wallpaper", self.on_set_wallpaper)
        self.create_action("next_image", self.on_next_image)
        self.create_action("prev_image", self.on_prev_image)

    def do_startup(self):
        Gtk.Application.do_startup(self)

    def do_activate(self):
        if not hasattr(self, "win"):
            self.win = ImageViewer(self, self.image_files)
            self.win.present()

    def do_open(self, files, n_files, hint):
        paths = [f.get_path() for f in files if f.get_path() is not None]
        if hasattr(self, "win"):
            self.win.image_files = paths
            self.win.load_image(0)
        else:
            self.win = ImageViewer(self, paths)
            self.win.present()

    def create_action(self, name, callback):
        action = Gio.SimpleAction.new(name, None)
        action.connect("activate", callback)
        self.add_action(action)

    def on_set_wallpaper(self, action, param):
        self.win.set_wallpaper()

    def on_next_image(self, action, param):
        self.win.next_image()

    def on_prev_image(self, action, param):
        self.win.prev_image()


if __name__ == "__main__":
    if len(sys.argv) < 2:
        print("Usage: python3 swwwv.py <images...> [--copy-to <dest>]")
        sys.exit(1)

    copy_to_path = None
    images = []
    filtered_args = [sys.argv[0]]  # keep program name for app.run()

    skip_next = False
    for i in range(1, len(sys.argv)):
        if skip_next:
            skip_next = False
            continue
        # useful to copy to fav.jpg if you have swww to start with default image
        if sys.argv[i] == "--copy-to":
            if i + 1 >= len(sys.argv):
                print("Error: --copy-to requires a destination path")
                sys.exit(1)
            copy_to_path = sys.argv[i + 1]
            skip_next = True
        else:
            images.append(sys.argv[i])
            filtered_args.append(sys.argv[i])

    if not images:
        print("No images specified")
        sys.exit(1)

    if copy_to_path:
        os.makedirs(os.path.dirname(copy_to_path), exist_ok=True)
        try:
            shutil.copy(images[0], copy_to_path)
            print(f"Copied {images[0]} to {copy_to_path}")
        except Exception as e:
            print(f"Failed to copy {images[0]}: {e}")

    # Pass filtered args (without --copy-to and path) to GTK app
    app = ImageViewerApp(images)
    app.run(filtered_args)
